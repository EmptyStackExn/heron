(**
   Module VCD

   Author : Hai Nguyen Van
            LRI, UniversitÃ© Paris-Sud/CNRS
   
   The copyright to this code is held by Laboratoire de Recherche en
   Informatique, UniversitÃ© Paris-Sud/CNRS. All rights reserved. This
   file is distributed under the MIT License.
*)

fun writeFile filename content =
    let val fd = TextIO.openOut filename
        val _ = TextIO.output (fd, content) handle e => (TextIO.closeOut fd; raise e)
        val _ = TextIO.closeOut fd
    in () end

fun VCD_toString (RELEASE_VERSION: string) (step_index: int) (clocks: clock list) (G: system, _, _, _) =
  let
      val date = "$date\n"
		   ^ (Date.toString (Date.fromTimeUniv (Time.now()))) ^ "\n"
		   ^ "$end\n"
      val version = "$version\n"
		      ^ "Generated by Heron " ^ RELEASE_VERSION ^ "\n"
		      ^ "$end\n"
      val timescale = "$timescale 1 us $end\n"
      val comment = "$comment\n"
		      ^ ""
		      ^ "$end\n"
      val scope = "$scope module top $end\n"
		    ^ String.concat (List.map (fn Clk cname => "$var event 1 " ^ cname ^ " " ^ cname ^ " $end\n") clocks)
		    ^ "$upscope $end\n$enddefinitions $end\n$dumpvars\n$end\n"
      fun instant_dump (n: int) =
	 "#" ^ (Int.toString ((n - 1) * 1000000)) ^ "\n"
	 ^ String.concat (List.map (fn Clk cname =>
					   if List.exists (fn Ticks (Clk cname', n') => cname = cname' andalso n = n' | _ => false) G
					   then "1" ^ cname ^ "\n"
					   else ""
				      ) clocks)
  in
      date ^ version ^ timescale ^ comment ^ scope ^ (List.foldl (fn (k, s) => s ^ (instant_dump k)) "" (range step_index))
  end
