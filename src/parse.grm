(**
   Module Parse.grm

   Author : Hai Nguyen Van
            LRI, Université Paris-Sud/CNRS
   
   The copyright to this code is held by Laboratoire de Recherche en
   Informatique, Université Paris-Sud/CNRS. All rights reserved. This
   file is distributed under the MIT License.
*)
fun opposite_tag t = case t of
    Unit   => Unit
  | Int n  => Int (~n)
  | Rat pq => Rat (~/ pq)
  | _      => t


%%

%eop EOF SEMI

(* %pos declares the type of positions for terminals.
   Each symbol has an associated left and right position. *)

%pos int

%left SPORADIC
%left IMPLIES

%term ID of string | NUM of int | DECNUM of rat | SPORADIC | IMPLIES | TYPEDECL of tag_t * bool
      | SEMI | EOF | EQ | PLUS | MINUS | TIMES | DIV | SHARP | TAGREL | TIME | ON | IN | DELAYED
      | FILTERED | LPAR | RPAR | LBRACK | RBRACK | LDIP | RDIP | COMMA
      | SUSTAINED | IMMEDIATELY | TO | WEAKLY | STRICTLY
      | AWAIT | WEAK | STRONG
      | WHEN | NOT
      | EVERY | STARTING | AT
      | PERIODIC | OFFSET
      | NOW
      | NEXT
      | WITH
      | RESET
      | UNIT_VAL
      | BY
      | FROM
      | LET | INT | DECIMAL | RATIONAL | FLOAT
      | DIR_MAXSTEP | DIR_MINSTEP | DIR_HEURISTIC | DIR_DUMPRES | DIR_SCENARIO | STRICT | DIR_RUN | DIR_RUNSTEP | DIR_PRINT | DIR_EXIT | DIR_HELP | DIR_STUTTER
      | UNTIL
      | DIR_OUTPUT | VCD | SVG | TEX | TIKZ | PDF | CSV
      | DIR_DRIVINGDECL | DIR_EVENTCONCRETIZE
      | DIR_SELECT 
      | SELECT 
      | ARROW
      | PRECEDES
      | EXCLUDES
      | KILLS
      | PRE 
      | DER
      | CONJ_CLAUSE
      | DISJ_CLAUSE

%nonterm CLK of clock | CLKS of clock list | CLKS_CONJ of clock list | CLKS_DISJ of clock list | TCLKS of (clock * tag_scenario) list | EXP of TESL_atomic | START of TESL_atomic option | TAG of tag | TAGS of tag list | CLKARGS of clock list | CLK_EXPR of clk_expr | CLKEXPRARGS of clk_expr list

%name Calc

%prefer SPORADIC IMPLIES
%keyword SEMI

%noshift EOF
%verbose
%left PLUS MINUS
%left TIMES
%%

(* the parser returns the value associated with the expression *)

  START : EXP (SOME EXP)
        | (NONE)
  CLKS_CONJ : ID CONJ_CLAUSE CLKS_CONJ                                         (Clk (ID) :: CLKS_CONJ)
       | ID                                                                    ([Clk (ID)])
  CLKS_DISJ : ID DISJ_CLAUSE CLKS_DISJ                                         (Clk (ID) :: CLKS_DISJ)
       | ID                                                                    ([Clk (ID)])
  CLK : ID                                                                     (Clk (ID))
  CLKS : ID                                                                    ([Clk (ID)])
       | ID CLKS                                                               (Clk (ID) :: CLKS)
  CLKARGS : RPAR                                                               ([])
          | ID RPAR                                                            ([Clk (ID)])
          | ID COMMA CLKARGS                                                   (Clk (ID) :: CLKARGS)
  TAG  : UNIT_VAL                                                              (Unit)
	| NUM                                                                   (Int (NUM))
       | DECNUM                                                                (Rat (DECNUM))
       | LDIP NUM DIV NUM RDIP                                                 (Rat (rat_normal (LargeInt.fromInt NUM1, LargeInt.fromInt NUM2)))
  TAGS : TAG                                                                   ([TAG])
       | TAG COMMA TAGS                                                        (TAG :: TAGS)
       | TAG TAGS                                                              (TAG :: TAGS)
  TCLKS : ID                                                                   ([(Clk ID, NoneTag)])
        | ID TCLKS                                                             ((Clk ID, NoneTag) :: TCLKS)
	 | LPAR ID ARROW TAG RPAR                                               ([(Clk ID, CstTag TAG)])
        | LPAR ID ARROW TAG RPAR TCLKS                                         ((Clk ID, CstTag TAG) :: TCLKS)
	 | LPAR ID ARROW ID RPAR                                                ([(Clk ID1, SymbTag (Clk ID2))])
        | LPAR ID ARROW ID RPAR TCLKS                                          ((Clk ID1, SymbTag (Clk ID2)) :: TCLKS)
  CLK_EXPR: LPAR CLK_EXPR RPAR                                                 (CLK_EXPR)
          | TAG                                                                (ClkCst (TAG))
          | CLK                                                                (ClkName (CLK))
          | DER CLK_EXPR                                                       (ClkDer (CLK_EXPR))
          | PRE CLK_EXPR                                                       (ClkPre (CLK_EXPR))
          | LBRACK TAGS RBRACK ARROW CLK_EXPR                                  (ClkFby (TAGS, CLK_EXPR))
          | CLK_EXPR PLUS CLK_EXPR                                             (ClkPlus (CLK_EXPR1, CLK_EXPR2))
          | CLK_EXPR MINUS CLK_EXPR                                            (ClkMinus (CLK_EXPR1, CLK_EXPR2))
          | CLK_EXPR TIMES CLK_EXPR                                            (ClkMult (CLK_EXPR1, CLK_EXPR2))
          | CLK_EXPR DIV CLK_EXPR                                              (ClkDiv (CLK_EXPR1, CLK_EXPR2))
          | ID UNIT_VAL                                                        (ClkFun(Fun ID, []))
          | ID LPAR CLKEXPRARGS						         (ClkFun(Fun ID, CLKEXPRARGS))
  CLKEXPRARGS : RPAR                                                           ([])
          | CLK_EXPR RPAR                                                      ([CLK_EXPR])
          | CLK_EXPR COMMA CLKEXPRARGS                                         (CLK_EXPR :: CLKEXPRARGS)

  EXP : 
	 TYPEDECL CLK                                                           (case TYPEDECL of (tt, mb) => TypeDecl (CLK, tt, mb))
      | LET INT ID EQ TAG                                                      (raise UnsupportedParsedTerm) 
      | LET DECIMAL ID EQ TAG							  (raise UnsupportedParsedTerm) 
      | LET RATIONAL ID EQ TAG							  (raise UnsupportedParsedTerm) 
      | LET FLOAT ID EQ TAG								  (raise UnsupportedParsedTerm) 
      | CLK SPORADIC                                                           (Sporadics (CLK, [Unit]))
      | CLK SPORADIC TAGS                                                      (Sporadics (CLK, TAGS))
      | CLK SPORADIC TAG ON CLK                                                (WhenTickingOn (CLK2, TAG, CLK1))
      | TYPEDECL CLK SPORADIC TAGS                                             (case TYPEDECL of (tt, mono) => 
													      TypeDeclSporadics (tt, CLK, TAGS, mono))
      | TYPEDECL CLK SPORADIC                                                  (case TYPEDECL of
												(Unit_t, _) => TypeDeclSporadics (Unit_t, CLK, [Unit], true)
											     | _ => raise UnsupportedParsedTerm)
      | CLKS_CONJ IMPLIES CLKS_DISJ                                            (ImpliesGen (CLKS_CONJ, CLKS_DISJ))
(*      | CLK IMPLIES CLK                                                        (Implies (CLK1, CLK2)) *)
      | CLK IMPLIES NOT CLK						                (ImpliesNot (CLK1, CLK2))
(*
      | TAGREL CLK EQ TAG TIMES CLK PLUS TAG                                   (TagRelationAff (CLK1, TAG1, CLK2, TAG2))
      | TAGREL CLK EQ TAG TIMES CLK MINUS TAG                                  (TagRelationAff (CLK1, TAG1, CLK2, opposite_tag TAG2))
      | TAGREL CLK EQ TAG TIMES CLK                                            (case TAG of Int _ => TagRelationAff (CLK1, TAG, CLK2, Int (0))
												      | Rat _ => TagRelationAff (CLK1, TAG, CLK2, Rat (rat_zero))
												      | _     => raise UnsupportedParsedTerm)
      | TAGREL CLK EQ CLK                                                      (TagRelationRefl (CLK1, CLK2))
      | TAGREL CLK EQ LBRACK TAGS RBRACK ARROW CLK                             (TagRelationFby (CLK1, TAGS, CLK2))
      | TAGREL CLK EQ TAG                                                      (TagRelationCst (CLK, TAG))
      | TAGREL CLK EQ CLK TIMES CLK PLUS CLK                                   (TagRelationClk (CLK1, CLK2, CLK3, CLK4))
      | TAGREL CLK EQ PRE CLK                                                  (TagRelationPre (CLK1, CLK2))
      | TAGREL CLK EQ DER CLK                                                  (TagRelationDer (CLK1, CLK2))
      | TAGREL CLK EQ ID UNIT_VAL                                              (TagRelationFun (CLK, Fun ID, []))
      | TAGREL CLK EQ ID LPAR CLKARGS                                          (TagRelationFun (CLK, Fun ID, CLKARGS))
*)
      | TAGREL CLK_EXPR EQ CLK_EXPR                                            (TagRelation (ClkExprEqual, CLK_EXPR1, CLK_EXPR2))
      | CLK IMPLIES TAGREL CLK EQ CLK                                          (TagRelationReflImplies (CLK1, CLK2, CLK3))
      | CLK TIME DELAYED BY TAG ON CLK IMPLIES CLK                             (TimeDelayedBy (CLK1, TAG, CLK2, NONE, CLK3))
      | CLK TIME DELAYED BY TAG ON CLK WITH RESET ON CLK IMPLIES CLK		   (TimeDelayedBy (CLK1, TAG, CLK2, SOME (CLK3), CLK4))
      | CLK DELAYED BY NUM ON CLK IMPLIES CLK                                  (DelayedBy (CLK1, NUM, CLK2, CLK3))
      | CLK IMMEDIATELY DELAYED BY NUM ON CLK IMPLIES CLK                      (ImmediatelyDelayedBy (CLK1, NUM, CLK2, CLK3))
      | CLK DELAYED BY NUM ON CLK WITH RESET ON CLK IMPLIES CLK                (raise UnsupportedParsedTerm)
      | CLK IMMEDIATELY DELAYED BY NUM ON CLK WITH RESET ON CLK IMPLIES CLK    (raise UnsupportedParsedTerm)
      | CLK FILTERED BY NUM COMMA NUM LPAR NUM COMMA NUM RPAR TIMES IMPLIES CLK (FilteredBy (CLK1, NUM1, NUM2, NUM3, NUM4, CLK2))
      | CLK SUSTAINED FROM CLK TO CLK IMPLIES CLK                              (SustainedFrom (CLK1, CLK2, CLK3, CLK4))
      | CLK SUSTAINED IMMEDIATELY FROM CLK TO CLK IMPLIES CLK                  (SustainedFromImmediately (CLK1, CLK2, CLK3, CLK4))
      | CLK SUSTAINED FROM CLK TO CLK WEAKLY IMPLIES CLK                       (SustainedFromWeakly (CLK1, CLK2, CLK3, CLK4))
      | CLK SUSTAINED IMMEDIATELY FROM CLK TO CLK WEAKLY IMPLIES CLK           (SustainedFromImmediatelyWeakly (CLK1, CLK2, CLK3, CLK4))
      | AWAIT CLKS IMPLIES CLK                                                 (Await (CLKS, CLKS, CLKS, CLK))
      | AWAIT CLKS WITH WEAK RESET ON CLK IMPLIES CLK                          (raise UnsupportedParsedTerm)
      | AWAIT CLKS WITH STRONG RESET ON CLK IMPLIES CLK				  (raise UnsupportedParsedTerm)
      | CLK WHEN CLK IMPLIES CLK                                               (WhenClock (CLK1, CLK2, CLK3))
      | CLK WHEN NOT CLK IMPLIES CLK                                           (WhenNotClock (CLK1, CLK2, CLK3))
      | CLK EVERY NUM STARTING AT NUM IMPLIES CLK                              (EveryImplies (CLK1, NUM1, NUM2, CLK2))
      | CLK EVERY NUM IMPLIES CLK                                              (EveryImplies (CLK1, NUM, 0, CLK2))
      | CLK PERIODIC TAG OFFSET TAG                                            (Periodic (CLK, TAG1, TAG2))
      | CLK PERIODIC TAG                                                       (case TAG of Int _ => Periodic (CLK, TAG, Int 0) 
												      | Rat _ => Periodic (CLK, TAG, Rat rat_zero)
												      | _     => raise UnsupportedParsedTerm)
      | TYPEDECL CLK PERIODIC TAG OFFSET TAG                                   (case TYPEDECL of (tt, _) => 
												TypeDeclPeriodic (tt, CLK, TAG1, TAG2)) 
      | TYPEDECL CLK PERIODIC TAG							  (case TYPEDECL of (tt, _) => 
												(case TAG of Int _ => TypeDeclPeriodic (tt, CLK, TAG, Int 0) 
													   | Rat _ => TypeDeclPeriodic (tt, CLK, TAG, Rat rat_zero)
													   | _     => raise UnsupportedParsedTerm))
      | CLK NEXT TO CLK IMPLIES CLK                                            (NextTo (CLK1, CLK2, CLK3))
      | CLK STRICTLY PRECEDES CLK                                              (Precedes (CLK1, CLK2, false))
      | CLK WEAKLY PRECEDES CLK                                                (Precedes (CLK1, CLK2, true))
      | CLK EXCLUDES CLK                                                       (Excludes (CLK1, CLK2))
      | CLK KILLS CLK							         (Kills (CLK1, CLK2))

      | DIR_MAXSTEP NUM                                                        (DirMaxstep (NUM))
      | DIR_MINSTEP NUM                                                        (DirMinstep (NUM))
      | DIR_HEURISTIC ID                                                       (DirHeuristic (ID))
      | DIR_DUMPRES                                                            (DirDumpres)
      | DIR_SCENARIO STRICT NOW TCLKS						  (DirScenario (true, NowPos, TCLKS))
      | DIR_SCENARIO STRICT NEXT TCLKS						  (DirScenario (true, NextPos, TCLKS))
      | DIR_SCENARIO STRICT NUM  TCLKS						  (DirScenario (true, Pos NUM, TCLKS))
      | DIR_SCENARIO		NOW TCLKS						  (DirScenario (false, NowPos, TCLKS))
      | DIR_SCENARIO		NEXT TCLKS						  (DirScenario (false, NextPos, TCLKS))
      | DIR_SCENARIO		NUM  TCLKS						  (DirScenario (false, Pos NUM, TCLKS))
      | DIR_RUN                                                                (DirRun [])
      | DIR_RUN UNTIL CLKS                                                     (DirRun CLKS)
      | DIR_RUNSTEP                                                            (DirRunStep)
      | DIR_PRINT                                                              (DirPrint [])
      | DIR_PRINT SELECT CLKS                                                  (DirPrint CLKS)
      | DIR_EXIT                                                               (DirExit)
      | DIR_HELP                                                               (DirHelp)
      | DIR_OUTPUT VCD                                                         (DirOutputVCD)
      | DIR_OUTPUT CSV                                                         (DirOutputCSV ([],NONE))
      | DIR_OUTPUT CSV  SELECT CLKS                                            (DirOutputCSV (CLKS,NONE))
      | DIR_OUTPUT CSV  SELECT CLKS IN ID                                      (DirOutputCSV (CLKS,SOME ID))
      | DIR_OUTPUT TIKZ SELECT CLKS                                            (DirOutputTEX (false, false, CLKS))
      | DIR_OUTPUT TEX  SELECT CLKS                                            (DirOutputTEX (true, false, CLKS))
      | DIR_OUTPUT PDF  SELECT CLKS                                            (DirOutputTEX (true, true, CLKS))
      | DIR_OUTPUT TIKZ                                                        (DirOutputTEX (false, false, []))
      | DIR_OUTPUT TEX                                                         (DirOutputTEX (true, false, []))
      | DIR_OUTPUT PDF                                                         (DirOutputTEX (true, true, []))
      | DIR_OUTPUT SVG                                                         (raise UnsupportedParsedTerm)
      | DIR_SELECT SHARP NUM                                                   (DirSelect (Ordinal NUM))
      | DIR_SELECT NUM                                                         (DirSelect (Hexadecimal NUM))
      | DIR_DRIVINGDECL CLKS                                                   (DirDrivingClock (CLKS))
      | DIR_EVENTCONCRETIZE								  (DirEventConcretize (NONE))
      | DIR_EVENTCONCRETIZE NUM							  (DirEventConcretize (SOME NUM))
      | DIR_STUTTER          							  (DirStutter)
