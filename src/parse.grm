(**
   Module Parse.grm

   Author : Hai Nguyen Van
            LRI, Université Paris-Sud/CNRS
   
   The copyright to this code is held by Laboratoire de Recherche en
   Informatique, Université Paris-Sud/CNRS. All rights reserved. This
   file is distributed under the MIT License.
*)
%%

%eop EOF SEMI

(* %pos declares the type of positions for terminals.
   Each symbol has an associated left and right position. *)

%pos int

%left SPORADIC
%left IMPLIES

%term ID of string | NUM of int | DECNUM of rat | SPORADIC | IMPLIES | TYPEDECL of tag_t
      | SEMI | EOF | EQ | PLUS | TIMES | DIV | TAGREL | TIME | ON | DELAYED
      | FILTERED | LPAR | RPAR | LDIP | RDIP | COMMA
      | SUSTAINED | IMMEDIATELY | TO | WEAKLY 
      | AWAIT | WEAK | STRONG
      | WHEN | NOT
      | EVERY | STARTING | AT
      | PERIODIC | OFFSET
      | NEXT
      | WITH
      | RESET
      | UNIT_VAL
      | BY
      | FROM
      | LET | INT | DECIMAL | RATIONAL | FLOAT
      | DIR_MAXSTEP | DIR_MINSTEP | DIR_HEURISTIC | DIR_DUMPRES | DIR_SCENARIO | STRICT | DIR_RUN | DIR_RUNSTEP | DIR_PRINT | DIR_EXIT | DIR_HELP
      | DIR_OUTPUT | VCD | SVG 
      | DIR_DRIVINGDECL | DIR_EVENTCONCRETIZE
      | DIR_SELECT 
      | ARROW
      | PRECEDES
      | EXCLUDES

%nonterm CLK of clock | CLKS of clock list | TCLKS of (clock * tag option) list | EXP of TESL_atomic | START of TESL_atomic option | TAG of tag | TAGS of tag list 

%name Calc

%prefer SPORADIC IMPLIES
%keyword SEMI

%noshift EOF
%verbose
%%

(* the parser returns the value associated with the expression *)

  START : EXP (SOME EXP)
        | (NONE)
  CLK : ID                                                                     (Clk (ID))
  CLKS : ID                                                                    ([Clk (ID)])
       | ID CLKS                                                               (Clk (ID) :: CLKS)
  TAG  : UNIT_VAL                                                              (Unit)
	| NUM                                                                   (Int (NUM))
       | DECNUM                                                                (Rat (DECNUM))
       | LDIP NUM DIV NUM RDIP                                                 (Rat (rat_normal (LargeInt.fromInt NUM1, LargeInt.fromInt NUM2)))
  TAGS : TAG                                                                   ([TAG])
       | TAG COMMA TAGS                                                        (TAG :: TAGS)
  TCLKS : ID                                                                   ([(Clk ID, NONE)])
        | ID TCLKS                                                             ((Clk ID, NONE) :: TCLKS)
	 | LPAR ID ARROW TAG RPAR                                               ([(Clk ID, SOME TAG)])
        | LPAR ID ARROW TAG RPAR TCLKS                                        ((Clk ID, SOME TAG) :: TCLKS)
  EXP : 
	 TYPEDECL CLK                                                           (TypeDecl (CLK, TYPEDECL))
      | LET INT ID EQ TAG                                                      (raise UnsupportedParsedTerm) 
      | LET DECIMAL ID EQ TAG							  (raise UnsupportedParsedTerm) 
      | LET RATIONAL ID EQ TAG							  (raise UnsupportedParsedTerm) 
      | LET FLOAT ID EQ TAG								  (raise UnsupportedParsedTerm) 
      | CLK SPORADIC TAGS                                                      (Sporadics (CLK, TAGS))
      | TYPEDECL CLK SPORADIC TAGS                                             (TypeDeclSporadics (TYPEDECL, CLK, TAGS))
      | TYPEDECL CLK SPORADIC                                                  (case TYPEDECL of
												Unit_t => TypeDeclSporadics (TYPEDECL, CLK, [Unit])
											     | _ => raise UnsupportedParsedTerm)
      | CLK IMPLIES CLK                                                        (Implies (CLK1, CLK2))
      | TAGREL CLK EQ TAG TIMES CLK PLUS TAG                                   (TagRelation (CLK1, TAG1, CLK2, TAG2))
      | TAGREL CLK EQ TAG TIMES CLK                                            (case TAG of Int _ => TagRelation (CLK1, TAG, CLK2, Int (0))
												      | Rat _ => TagRelation (CLK1, TAG, CLK2, Rat (rat_zero))
												      | _     => raise UnsupportedParsedTerm)
      | TAGREL CLK EQ CLK                                                      (TagRelationRefl (CLK1, CLK2))
      | CLK TIME DELAYED BY TAG ON CLK IMPLIES CLK                             (TimeDelayedBy (CLK1, TAG, CLK2, CLK3))
      | CLK TIME DELAYED BY TAG ON CLK WITH RESET ON CLK IMPLIES CLK		  (raise UnsupportedParsedTerm)
      | CLK DELAYED BY NUM ON CLK IMPLIES CLK                                  (DelayedBy (CLK1, NUM, CLK2, CLK3))
      | CLK IMMEDIATELY DELAYED BY NUM ON CLK IMPLIES CLK                      (ImmediatelyDelayedBy (CLK1, NUM, CLK2, CLK3))
      | CLK DELAYED BY NUM ON CLK WITH RESET ON CLK IMPLIES CLK                (raise UnsupportedParsedTerm)
      | CLK IMMEDIATELY DELAYED BY NUM ON CLK WITH RESET ON CLK IMPLIES CLK    (raise UnsupportedParsedTerm)
      | CLK FILTERED BY NUM COMMA NUM LPAR NUM COMMA NUM RPAR TIMES IMPLIES CLK (FilteredBy (CLK1, NUM1, NUM2, NUM3, NUM4, CLK2))
      | CLK SUSTAINED FROM CLK TO CLK IMPLIES CLK                              (SustainedFrom (CLK1, CLK2, CLK3, CLK4))
      | CLK SUSTAINED IMMEDIATELY FROM CLK TO CLK IMPLIES CLK                  (SustainedFromImmediately (CLK1, CLK2, CLK3, CLK4))
      | CLK SUSTAINED FROM CLK TO CLK WEAKLY IMPLIES CLK                       (SustainedFromWeakly (CLK1, CLK2, CLK3, CLK4))
      | CLK SUSTAINED IMMEDIATELY FROM CLK TO CLK WEAKLY IMPLIES CLK           (SustainedFromImmediatelyWeakly (CLK1, CLK2, CLK3, CLK4))
      | AWAIT CLKS IMPLIES CLK                                                 (Await (CLKS, CLKS, CLKS, CLK))
      | AWAIT CLKS WITH WEAK RESET ON CLK IMPLIES CLK                          (raise UnsupportedParsedTerm)
      | AWAIT CLKS WITH STRONG RESET ON CLK IMPLIES CLK				  (raise UnsupportedParsedTerm)
      | CLK WHEN CLK IMPLIES CLK                                               (WhenClock (CLK1, CLK2, CLK3))
      | CLK WHEN NOT CLK IMPLIES CLK                                           (WhenNotClock (CLK1, CLK2, CLK3))
      | CLK EVERY NUM STARTING AT NUM IMPLIES CLK                              (EveryImplies (CLK1, NUM1, NUM2, CLK2))
      | CLK EVERY NUM IMPLIES CLK                                              (EveryImplies (CLK1, NUM, 0, CLK2))
      | CLK PERIODIC TAG OFFSET TAG                                            (Periodic (CLK, TAG1, TAG2))
      | CLK PERIODIC TAG                                                       (case TAG of Int _ => Periodic (CLK, TAG, Int 0) 
												      | Rat _ => Periodic (CLK, TAG, Rat rat_zero)
												      | _     => raise UnsupportedParsedTerm)
      | TYPEDECL CLK PERIODIC TAG OFFSET TAG                                   (TypeDeclPeriodic (TYPEDECL, CLK, TAG1, TAG2)) 
      | TYPEDECL CLK PERIODIC TAG							  (case TAG of Int _ => TypeDeclPeriodic (TYPEDECL, CLK, TAG, Int 0) 
												      | Rat _ => TypeDeclPeriodic (TYPEDECL, CLK, TAG, Rat rat_zero)
												      | _     => raise UnsupportedParsedTerm)
      | CLK NEXT TO CLK IMPLIES CLK                                            (NextTo (CLK1, CLK2, CLK3))
      | CLK PRECEDES CLK                                                       (Precedes (CLK1, CLK2, false))
      | CLK WEAKLY PRECEDES CLK                                                (Precedes (CLK1, CLK2, true))
      | CLK EXCLUDES CLK                                                       (Excludes (CLK1, CLK2))

      | DIR_MAXSTEP NUM                                                        (DirMaxstep (NUM))
      | DIR_MINSTEP NUM                                                        (DirMinstep (NUM))
      | DIR_HEURISTIC ID                                                       (DirHeuristic (ID))
      | DIR_DUMPRES                                                            (DirDumpres)
      | DIR_SCENARIO STRICT NEXT TCLKS						  (DirScenario (true, NONE, TCLKS))
      | DIR_SCENARIO STRICT NUM  TCLKS						  (DirScenario (true, SOME NUM, TCLKS))
      | DIR_SCENARIO		NEXT TCLKS						  (DirScenario (false, NONE, TCLKS))
      | DIR_SCENARIO		NUM  TCLKS						  (DirScenario (false, SOME NUM, TCLKS))
      | DIR_RUN                                                                (DirRun)
      | DIR_RUNSTEP                                                            (DirRunStep)
      | DIR_PRINT                                                              (DirPrint)
      | DIR_EXIT                                                               (DirExit)
      | DIR_HELP                                                               (DirHelp)
      | DIR_OUTPUT VCD                                                         (DirOutputVCD)
      | DIR_OUTPUT SVG                                                         (raise UnsupportedParsedTerm)
      | DIR_SELECT NUM                                                         (DirSelect (NUM))
      | DIR_DRIVINGDECL CLKS                                                   (DirDrivingClock (CLKS))
      | DIR_EVENTCONCRETIZE								  (DirEventConcretize (NONE))
      | DIR_EVENTCONCRETIZE NUM							  (DirEventConcretize (SOME NUM))
